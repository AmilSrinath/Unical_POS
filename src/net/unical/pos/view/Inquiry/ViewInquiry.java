/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package net.unical.pos.view.Inquiry;

import java.awt.Dimension;
import net.unical.pos.view.Payment.*;
import net.unical.pos.view.OrderFilter.*;
import java.text.DateFormat;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.unical.pos.view.home.Dashboard;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.unical.pos.controller.DeliveryOrderController;
import net.unical.pos.controller.PaymentTypesController;
import net.unical.pos.dto.PaymentTypeDto;
import net.unical.pos.log.Log;
import net.unical.pos.model.DeliveryOrder;
import net.unical.pos.model.DeliveryOrderAmounts;
import net.unical.pos.model.InquiryModel;
import net.unical.pos.model.StatusTypeModel;
import net.unical.pos.repository.impl.DeliveryOrderRepositoryImpl;
import net.unical.pos.repository.impl.InquiryRepositoryImpl;
import net.unical.pos.repository.impl.PaymentRepositoryImpl;
import net.unical.pos.repository.impl.StatusTypeRepositoryImpl;
import net.unical.pos.view.deliveryOrders.DeliveryOrders;
import static net.unical.pos.view.deliveryOrders.DeliveryOrders.statusTypes;

/**
 *
 * @author apple
 */
public class ViewInquiry extends JInternalFrame {

    private ArrayList<Integer> paymentTypeIds = new ArrayList<>();
    private PaymentTypesController paymentTypesController;
    private ArrayList<Integer> paymentTypeIds_2 = new ArrayList<>();
    private DeliveryOrderRepositoryImpl deliveryOrderRepositoryImpl;
    private StatusTypeRepositoryImpl statusTypeRepositoryImpl;
    public static List<StatusTypeModel> statusTypes = new ArrayList<>();
    public InquiryModel inquiryModel;
    String wayBill = null;

    private InquiryRepositoryImpl inquiryRepositoryImpl;

    /**
     * Creates new form OrderFilter
     */
    public ViewInquiry() {
        initComponents();
        setTitle("View Inquiry");
        setClosable(true);
        setMaximizable(true);
        setIconifiable(true);
        setResizable(true);
        pack();
        desktopPane = new javax.swing.JDesktopPane();
    }

    Dashboard dashboard;

    public ViewInquiry(Dashboard dashboard) {
        this();
        this.dashboard = dashboard;
        this.deliveryOrderRepositoryImpl = new DeliveryOrderRepositoryImpl();
        this.paymentTypesController = new PaymentTypesController();
        this.inquiryRepositoryImpl = new InquiryRepositoryImpl();
        this.statusTypeRepositoryImpl = new StatusTypeRepositoryImpl();

        setCurrentDate();
        getPaymentTypes();

        Format formatter = new SimpleDateFormat("yyyy-MM-dd");
        String fromDate = formatter.format(jXDatePicker1.getDate());
        String toDate = formatter.format(jXDatePicker2.getDate());

        statusTypes = statusTypeRepositoryImpl.getAllStatusTypeByRegID(3);

        StatusCombo.addItem("Any");
        for (StatusTypeModel stm : statusTypes) {
            StatusCombo.addItem(stm.getStatus_type());
        }

        getAllInquiry(fromDate, toDate, 0);
    }

    ViewInquiry(Dashboard dashboard, String fromDate, String toDate, int status) {
        this();
        this.dashboard = dashboard;
        this.deliveryOrderRepositoryImpl = new DeliveryOrderRepositoryImpl();
        this.paymentTypesController = new PaymentTypesController();
        this.inquiryRepositoryImpl = new InquiryRepositoryImpl();
        this.statusTypeRepositoryImpl = new StatusTypeRepositoryImpl();

        setCurrentDate();
        getPaymentTypes();

        statusTypes = statusTypeRepositoryImpl.getAllStatusTypeByRegID(3);

        StatusCombo.addItem("Any");
        for (StatusTypeModel stm : statusTypes) {
            StatusCombo.addItem(stm.getStatus_type());
        }
        getAllInquiry(fromDate, toDate, status);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InquiryOptions = new javax.swing.JDialog();
        btnPaid = new javax.swing.JButton();
        btnNotPaid = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        paymentOrdersTable = new org.jdesktop.swingx.JXTable();
        jPanel4 = new javax.swing.JPanel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jButton1 = new javax.swing.JButton();
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        total_orders_count_txt = new javax.swing.JLabel();
        StatusCombo = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        btnPaid.setBackground(new java.awt.Color(51, 153, 0));
        btnPaid.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPaid.setForeground(new java.awt.Color(255, 255, 255));
        btnPaid.setText("Delivered");
        btnPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaidActionPerformed(evt);
            }
        });

        btnNotPaid.setBackground(new java.awt.Color(255, 0, 51));
        btnNotPaid.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnNotPaid.setForeground(new java.awt.Color(255, 255, 255));
        btnNotPaid.setText("Not Delivered");
        btnNotPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotPaidActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("Action");

        btnReturn.setBackground(new java.awt.Color(255, 102, 51));
        btnReturn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(255, 255, 255));
        btnReturn.setText("Returned");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InquiryOptionsLayout = new javax.swing.GroupLayout(InquiryOptions.getContentPane());
        InquiryOptions.getContentPane().setLayout(InquiryOptionsLayout);
        InquiryOptionsLayout.setHorizontalGroup(
            InquiryOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InquiryOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(btnNotPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InquiryOptionsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(199, 199, 199))
        );
        InquiryOptionsLayout.setVerticalGroup(
            InquiryOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InquiryOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(InquiryOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnReturn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPaid, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(btnNotPaid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        paymentOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Way Bill", "Customer Code", "Customer Name", "Customer Phone 1", "Customer Phone 2", "Company", "Branch", "Branch Contact", "Created Date", "Reason", "Remark", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentOrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentOrdersTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                paymentOrdersTableMousePressed(evt);
            }
        });
        paymentOrdersTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                paymentOrdersTablePropertyChange(evt);
            }
        });
        paymentOrdersTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentOrdersTableKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(paymentOrdersTable);
        if (paymentOrdersTable.getColumnModel().getColumnCount() > 0) {
            paymentOrdersTable.getColumnModel().getColumn(0).setMinWidth(0);
            paymentOrdersTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            paymentOrdersTable.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        jPanel4.setBackground(new java.awt.Color(0, 102, 153));

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("From");

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("To");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Way Bill");

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Total Inquiry :");

        total_orders_count_txt.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        total_orders_count_txt.setForeground(new java.awt.Color(255, 255, 255));

        StatusCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StatusComboMouseClicked(evt);
            }
        });
        StatusCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusComboActionPerformed(evt);
            }
        });
        StatusCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                StatusComboKeyReleased(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Status");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jLabel18)))
                .addGap(80, 80, 80)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel17))
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel19))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(StatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel21)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 218, Short.MAX_VALUE)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total_orders_count_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(StatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel19)
                                            .addComponent(jLabel21))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(1, 1, 1))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(total_orders_count_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jButton2.setBackground(new java.awt.Color(255, 204, 0));
        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane6)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Format formatter = new SimpleDateFormat("yyyy-MM-dd");
        String fromDate = formatter.format(jXDatePicker1.getDate());
        String toDate = formatter.format(jXDatePicker2.getDate());

        int statusIndex = 0;

        for (StatusTypeModel stm : statusTypes) {
            if (StatusCombo.getSelectedItem().equals(stm.getStatus_type())) {
                statusIndex = stm.getStatus_id();
            }
        }
        getAllInquiry(fromDate, toDate, statusIndex);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void setCurrentDate() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        jXDatePicker1.setDate(date);
        jXDatePicker2.setDate(date);
    }

    private void getPaymentTypes() {
        try {
            String quary = "WHERE visible=1 AND status=1";
            ArrayList<PaymentTypeDto> paymentTypes = paymentTypesController.getPaymentTypes(quary);

            for (PaymentTypeDto typeDto : paymentTypes) {
                paymentTypeIds.add(typeDto.getPaymentTypeId());
                paymentTypeIds_2.add(typeDto.getPaymentTypeId());
            }
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
            Log.error(DeliveryOrder.class, "Cannot load Items : ", ex);
        }
    }

    private void getAllInquiry(String fromDate, String toDate, int status) {
        try {
            ArrayList<InquiryModel> inquiryModels = inquiryRepositoryImpl.getAllInquiryDuration(fromDate, toDate, status);
            System.out.println("Inquery Model : " + inquiryModels);
            DefaultTableModel dtm = (DefaultTableModel) paymentOrdersTable.getModel();
            dtm.setRowCount(0);

            String statusText = null;

            int count = 0;

            for (InquiryModel dto : inquiryModels) {
                count++;
                System.out.println("Status Types: " + statusTypes);
                if (dto.getStatusId() == statusTypes.get(0).getStatus_id()) { //Delivered
                    statusText = statusTypes.get(0).getStatus_type();
                } else if (dto.getStatusId() == statusTypes.get(1).getStatus_id()) { //Not Delivered
                    statusText = statusTypes.get(1).getStatus_type();
                } else if (dto.getStatusId() == statusTypes.get(2).getStatus_id()) {
                    statusText = statusTypes.get(2).getStatus_type();
                }

                Object[] rowData = {
                    "",
                    dto.getWayBill(),
                    dto.getCustomerId(),
                    dto.getCustomerName(),
                    dto.getCustomerPhone1(),
                    dto.getCustomerPhone2(),
                    dto.getCompany(),
                    dto.getBranch(),
                    dto.getBranchContact(),
                    dto.getCreateDate(),
                    dto.getReason(),
                    dto.getRemark(),
                    statusText
                };
                dtm.addRow(rowData);
            }

            total_orders_count_txt.setText(String.valueOf(count));
            paymentOrdersTable.getColumnModel().getColumn(12).setCellRenderer(new StatusCellRenderer());
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
            Log.error(ex, ex);
        }
    }


    private void paymentOrdersTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentOrdersTableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentOrdersTableKeyReleased

    private void paymentOrdersTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_paymentOrdersTablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentOrdersTablePropertyChange

    private void paymentOrdersTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentOrdersTableMousePressed
        if (evt.getClickCount() == 2) {
            int selectedRow = paymentOrdersTable.getSelectedRow();
            if (selectedRow != -1) {
                Object wayBillVal = paymentOrdersTable.getValueAt(selectedRow, 1);
                wayBill = wayBillVal != null ? wayBillVal.toString() : "";

                InquiryOptions.setLocationRelativeTo(null);
                InquiryOptions.setSize(440, 110);
                InquiryOptions.setVisible(true);
            }
        } else {
            int selectedRow = paymentOrdersTable.getSelectedRow();
            inquiryModel = new InquiryModel();

            Object value;

            value = paymentOrdersTable.getValueAt(selectedRow, 1);
            inquiryModel.setWayBill(value != null ? value.toString() : "");

            value = paymentOrdersTable.getValueAt(selectedRow, 2);
            inquiryModel.setCustomerId(value != null ? value.toString() : "");

            value = paymentOrdersTable.getValueAt(selectedRow, 3);
            inquiryModel.setCustomerName(value != null ? value.toString() : "");

            value = paymentOrdersTable.getValueAt(selectedRow, 4);
            inquiryModel.setCustomerPhone1(value != null ? value.toString() : "");

            value = paymentOrdersTable.getValueAt(selectedRow, 5);
            inquiryModel.setCustomerPhone2(value != null ? value.toString() : "Select Company");

            value = paymentOrdersTable.getValueAt(selectedRow, 6);
            inquiryModel.setCompany(value != null ? value.toString() : "Select Company");

            value = paymentOrdersTable.getValueAt(selectedRow, 7);
            inquiryModel.setBranch(value != null ? value.toString() : "");

            value = paymentOrdersTable.getValueAt(selectedRow, 8);
            inquiryModel.setBranchContact(value != null ? value.toString() : "");

            value = paymentOrdersTable.getValueAt(selectedRow, 10);
            inquiryModel.setReason(value != null ? value.toString() : "Select Reason");

            value = paymentOrdersTable.getValueAt(selectedRow, 11);
            inquiryModel.setRemark(value != null ? value.toString() : "");
        }
    }//GEN-LAST:event_paymentOrdersTableMousePressed

    private void paymentOrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentOrdersTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentOrdersTableMouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        String searchText = jTextField1.getText().trim();

        try {
            ArrayList<InquiryModel> inquiryModels = inquiryRepositoryImpl.searchInquiryByWayBill(searchText);
            DefaultTableModel dtm = (DefaultTableModel) paymentOrdersTable.getModel();
            dtm.setRowCount(0); // Clear existing rows

            String statusText = null;
            int count = 0;

            for (InquiryModel dto : inquiryModels) {
                count++;

                if (dto.getStatusId() == statusTypes.get(0).getStatus_id()) { //Delivered
                    statusText = statusTypes.get(0).getStatus_type();
                } else if (dto.getStatusId() == statusTypes.get(1).getStatus_id()) { //Not Delivered
                    statusText = statusTypes.get(1).getStatus_type();
                } else if (dto.getStatusId() == statusTypes.get(2).getStatus_id()) {//Returned
                    statusText = statusTypes.get(2).getStatus_type();
                }
                System.out.println("statusText : " + statusText);

                Object[] rowData = {
                    "",
                    dto.getWayBill(),
                    dto.getCustomerId(),
                    dto.getCustomerName(),
                    dto.getCustomerPhone1(),
                    dto.getCustomerPhone2(),
                    dto.getCompany(),
                    dto.getBranch(),
                    dto.getBranchContact(),
                    dto.getCreateDate(),
                    dto.getReason(),
                    dto.getRemark(),
                    statusText
                };
                dtm.addRow(rowData);

            }

            total_orders_count_txt.setText(String.valueOf(count));
            paymentOrdersTable.getColumnModel().getColumn(12).setCellRenderer(new StatusCellRenderer());
        } catch (Exception e) {
            e.printStackTrace();
            Log.error(e, e);
        }


    }//GEN-LAST:event_jTextField1KeyReleased


    private void btnPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaidActionPerformed
        if (wayBill != null) {
            inquiryRepositoryImpl.update(wayBill, 10);

            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            getAllInquiry(fromDate, toDate, 0);

            InquiryOptions.dispose();
        }
    }//GEN-LAST:event_btnPaidActionPerformed

    private void btnNotPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotPaidActionPerformed
        if (wayBill != null) {
            inquiryRepositoryImpl.update(wayBill, 11);

            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            getAllInquiry(fromDate, toDate, 0);

            InquiryOptions.dispose();
        }
    }//GEN-LAST:event_btnNotPaidActionPerformed

    private void StatusComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StatusComboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_StatusComboMouseClicked

    private void StatusComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StatusComboActionPerformed

    private void StatusComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StatusComboKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_StatusComboKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (!inquiryModel.getWayBill().isEmpty()) {
            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            int status = StatusCombo.getSelectedIndex();

            AddInquiry addInquiry = new AddInquiry(dashboard, inquiryModel, fromDate, toDate, status);
            dashboard.desktopPane.add(addInquiry);
            Dimension d = dashboard.desktopPane.getSize();
            addInquiry.setLayer(dashboard.desktopPane.POPUP_LAYER);
            addInquiry.setSize(d);
            addInquiry.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        if (wayBill != null) {
            inquiryRepositoryImpl.update(wayBill, 14);

            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            getAllInquiry(fromDate, toDate, 0);

            InquiryOptions.dispose();
        }
    }//GEN-LAST:event_btnReturnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewInquiry.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewInquiry.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewInquiry.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewInquiry.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewInquiry().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog InquiryOptions;
    private javax.swing.JComboBox<String> StatusCombo;
    private javax.swing.JButton btnNotPaid;
    private javax.swing.JButton btnPaid;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    private org.jdesktop.swingx.JXTable paymentOrdersTable;
    private javax.swing.JLabel total_orders_count_txt;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JDesktopPane desktopPane;

}
