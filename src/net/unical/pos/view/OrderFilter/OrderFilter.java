/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package net.unical.pos.view.OrderFilter;

import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import net.unical.pos.view.home.Dashboard;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.ooxml.JRXlsxExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimpleXlsxReportConfiguration;
import net.sf.jasperreports.view.JasperViewer;
import net.unical.pos.controller.PaymentTypesController;
import net.unical.pos.dbConnection.DBConnection;
import net.unical.pos.dto.PaymentTypeDto;
import net.unical.pos.log.Log;
import net.unical.pos.model.DeliveryOrder;
import net.unical.pos.model.DeliveryOrderAmounts;
import net.unical.pos.model.WrapperOrder;
import net.unical.pos.repository.impl.DeliveryOrderRepositoryImpl;
import net.unical.pos.view.Reports.Daily_Income;
import net.unical.pos.view.deliveryOrders.DeliveryOrders;
import net.unical.pos.view.deliveryOrders.StatusCellRenderer;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author apple
 */
public class OrderFilter extends JInternalFrame {
    private ArrayList<Integer> paymentTypeIds=new ArrayList<>();
    private PaymentTypesController paymentTypesController;
    private ArrayList<Integer> paymentTypeIds_2=new ArrayList<>();
    private DeliveryOrderRepositoryImpl deliveryOrderRepositoryImpl;

    /**
     * Creates new form OrderFilter
     */
    public OrderFilter() {
        initComponents();
        setTitle("Order Filter");
        setClosable(true);
        setMaximizable(true);
        setIconifiable(true);
        setResizable(true);
        pack();
    }
    
    Dashboard dashboard;
    
    public OrderFilter(Dashboard dashboard){
        this();dashboard = dashboard;
        this.deliveryOrderRepositoryImpl=new DeliveryOrderRepositoryImpl();
        this.paymentTypesController=new PaymentTypesController();
        setCurrentDate();
        getPaymentTypes();
        
        
        Format formatter = new SimpleDateFormat("yyyy-MM-dd");
        String fromDate = formatter.format(jXDatePicker1.getDate());
        String toDate = formatter.format(jXDatePicker2.getDate());
        
        getAllOrders(fromDate, toDate, 0, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderOptions = new javax.swing.JDialog();
        btnDeliverd = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnOutForDelivery = new javax.swing.JButton();
        btnActive = new javax.swing.JButton();
        btnWrapping = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        deliveryOrdersTable = new org.jdesktop.swingx.JXTable();
        jPanel4 = new javax.swing.JPanel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jButton1 = new javax.swing.JButton();
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        total_orders_count_txt = new javax.swing.JLabel();
        paymentTypeCombo1 = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        statusCmb = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        btnPrint = new javax.swing.JButton();

        orderOptions.setResizable(false);

        btnDeliverd.setBackground(new java.awt.Color(51, 153, 0));
        btnDeliverd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeliverd.setForeground(new java.awt.Color(255, 255, 255));
        btnDeliverd.setText("Deliverd");
        btnDeliverd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliverdActionPerformed(evt);
            }
        });

        btnReturn.setBackground(new java.awt.Color(255, 153, 0));
        btnReturn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(255, 255, 255));
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(204, 0, 0));
        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("Cancel Order");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOutForDelivery.setBackground(new java.awt.Color(51, 51, 255));
        btnOutForDelivery.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnOutForDelivery.setForeground(new java.awt.Color(255, 255, 255));
        btnOutForDelivery.setText("Out for delivery");
        btnOutForDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutForDeliveryActionPerformed(evt);
            }
        });

        btnActive.setBackground(new java.awt.Color(0, 204, 204));
        btnActive.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnActive.setForeground(new java.awt.Color(255, 255, 255));
        btnActive.setText("Active");
        btnActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActiveActionPerformed(evt);
            }
        });

        btnWrapping.setBackground(new java.awt.Color(204, 204, 0));
        btnWrapping.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnWrapping.setForeground(new java.awt.Color(255, 255, 255));
        btnWrapping.setText("Wrapping");
        btnWrapping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWrappingActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("Action");

        javax.swing.GroupLayout orderOptionsLayout = new javax.swing.GroupLayout(orderOptions.getContentPane());
        orderOptions.getContentPane().setLayout(orderOptionsLayout);
        orderOptionsLayout.setHorizontalGroup(
            orderOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDeliverd, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOutForDelivery)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnActive, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnWrapping, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderOptionsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(370, 370, 370))
        );
        orderOptionsLayout.setVerticalGroup(
            orderOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderOptionsLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(orderOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnDeliverd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReturn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOutForDelivery, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnActive, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnWrapping, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        deliveryOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Order Code", "Customer Name", "Phone One", "Phone Two", "COD", "Total Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deliveryOrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deliveryOrdersTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                deliveryOrdersTableMousePressed(evt);
            }
        });
        deliveryOrdersTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                deliveryOrdersTablePropertyChange(evt);
            }
        });
        deliveryOrdersTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deliveryOrdersTableKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(deliveryOrdersTable);
        if (deliveryOrdersTable.getColumnModel().getColumnCount() > 0) {
            deliveryOrdersTable.getColumnModel().getColumn(0).setResizable(false);
        }
        if (deliveryOrdersTable.getColumnModel().getColumnCount() > 0) {
            deliveryOrdersTable.getColumnModel().getColumn(0).setMinWidth(0);
            deliveryOrdersTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            deliveryOrdersTable.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        jPanel4.setBackground(new java.awt.Color(0, 102, 153));

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("From");

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("To");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Order ID");

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Total Orders :");

        total_orders_count_txt.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        total_orders_count_txt.setForeground(new java.awt.Color(255, 255, 255));

        paymentTypeCombo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any" }));
        paymentTypeCombo1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentTypeCombo1MouseClicked(evt);
            }
        });
        paymentTypeCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentTypeCombo1ActionPerformed(evt);
            }
        });
        paymentTypeCombo1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentTypeCombo1KeyReleased(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Payment Type");

        statusCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Active", "Pending", "Wrapping", "Out of Delivery", "Delivered", "Return", "Cancel" }));
        statusCmb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                statusCmbMouseClicked(evt);
            }
        });
        statusCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusCmbActionPerformed(evt);
            }
        });
        statusCmb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                statusCmbKeyReleased(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Status");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jLabel18))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(57, 57, 57)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel17))
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel19))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(paymentTypeCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(statusCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jButton1)
                        .addGap(95, 95, 95)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(total_orders_count_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel16)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel21)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total_orders_count_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(paymentTypeCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(statusCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel16)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnPrint.setBackground(new java.awt.Color(0, 153, 0));
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setText("Print Wrapping");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPrint)
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Format formatter = new SimpleDateFormat("yyyy-MM-dd");
        String fromDate = formatter.format(jXDatePicker1.getDate());
        String toDate = formatter.format(jXDatePicker2.getDate());

        int paymentTypeIndex = paymentTypeCombo1.getSelectedIndex();
        int paymentType = paymentTypeIndex != 0 ? paymentTypeIds_2.get(paymentTypeIndex - 1) : 0;

        int statusIndex = statusCmb.getSelectedIndex();

        getAllOrders(fromDate, toDate, paymentType, statusIndex);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void setCurrentDate() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        jXDatePicker1.setDate(date);
        jXDatePicker2.setDate(date);
    }
    
    private void getPaymentTypes() {
        try {
            String quary="WHERE visible=1 AND status=1";
            ArrayList<PaymentTypeDto> paymentTypes=paymentTypesController.getPaymentTypes(quary);
            
            for(PaymentTypeDto typeDto:paymentTypes){
                paymentTypeIds.add(typeDto.getPaymentTypeId());
                paymentTypeCombo1.addItem(typeDto.getName());
                paymentTypeIds_2.add(typeDto.getPaymentTypeId());
            }
            
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
            Log.error(DeliveryOrder.class, "Cannot load Items : ", ex);
        }
    }
    
    
    private void getAllOrders(String fromDate, String toDate, Integer paymentType, int status) {
        try {
            ArrayList<DeliveryOrder> deliveryOrderDtos = deliveryOrderRepositoryImpl.getAllDuration(fromDate, toDate, paymentType, status);
            ArrayList<DeliveryOrderAmounts> deliveryOrderAmountDto = deliveryOrderRepositoryImpl.getCalculation(fromDate, toDate, paymentType);

            DefaultTableModel dtm = (DefaultTableModel) deliveryOrdersTable.getModel();
            dtm.setRowCount(0);

            String statusText = null;
            boolean isPrint = false;

            int count = 0;
            double totAmount = 0.00;
            double totDeliveryFee = 0.00;
            double totCod = 0.00;
            double totReturns = 0.00;

            for (DeliveryOrder dto : deliveryOrderDtos) {
                count++;
                switch (dto.getStatusType()) {
                    case 1:
                        statusText = "Active";
                        break;
                    case 2:
                        statusText = "Pending";
                        break;
                    case 3:
                        statusText = "Wrapping";
                        break;
                    case 4:
                        statusText = "Out of Delivery";
                        break;
                    case 5:
                        statusText = "Delivered";
                        break;
                    case 6:
                        statusText = "Return";
                        break;
                    case 7:
                        statusText = "Cancel";
                        break;
                    default:
                        statusText = "Unknown";
                        break;
                }

                isPrint = dto.getIsPrint() == 1;
                Object[] rowData = {
                    dto.getOrderId(), 
                    dto.getOrderCode(), 
                    dto.getCustomerName(), 
                    dto.getPhoneOne(), 
                    dto.getPhoneTwo(), 
                    dto.getCod(), 
                    dto.getGrandTotalPrice(), 
                    statusText
                };
                dtm.addRow(rowData);
            }

            for (DeliveryOrderAmounts amounts : deliveryOrderAmountDto) {
                totAmount = amounts.getTotalAmount();
                totDeliveryFee = amounts.getTotalDeliveryCharge();
                totCod = amounts.getTotalCod();
                totReturns = amounts.getTotalReturns();
            }

            total_orders_count_txt.setText(String.valueOf(count));
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
        deliveryOrdersTable.getColumnModel().getColumn(7).setCellRenderer(new StatusCellRenderer());
    }
    
    
    private void deliveryOrdersTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deliveryOrdersTableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_deliveryOrdersTableKeyReleased

    private void deliveryOrdersTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_deliveryOrdersTablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_deliveryOrdersTablePropertyChange

    private void deliveryOrdersTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliveryOrdersTableMousePressed
        if (evt.getClickCount() == 2) {
            int selectedRow = deliveryOrdersTable.getSelectedRow();
            if (selectedRow != -1) {
                String status = deliveryOrdersTable.getValueAt(selectedRow, 7).toString();
                
                switch (status) {
                    case "Pending":
                        btnWrapping.setEnabled(true);
                        btnCancel.setEnabled(true);
                        btnActive.setEnabled(false);
                        btnOutForDelivery.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnReturn.setEnabled(false);
                        btnDeliverd.setEnabled(false);
                        break;
                        
                    case "Wrapping":
                        btnWrapping.setEnabled(false);
                        btnCancel.setEnabled(true);
                        btnActive.setEnabled(false);
                        btnOutForDelivery.setEnabled(true);
                        btnActive.setEnabled(false);
                        btnReturn.setEnabled(false);
                        btnDeliverd.setEnabled(false);
                        break;
                        
                    case "Out of Delivery":
                        btnWrapping.setEnabled(false);
                        btnCancel.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnOutForDelivery.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnReturn.setEnabled(true);
                        btnDeliverd.setEnabled(true);
                        break;
                        
                    case "Delivered":
                        btnWrapping.setEnabled(false);
                        btnCancel.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnOutForDelivery.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnReturn.setEnabled(false);
                        btnDeliverd.setEnabled(false);
                        break;
                        
                    case "Return":
                        btnWrapping.setEnabled(false);
                        btnCancel.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnOutForDelivery.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnReturn.setEnabled(false);
                        btnDeliverd.setEnabled(false);
                        break;
                        
                    case "Cancel":
                        btnWrapping.setEnabled(false);
                        btnCancel.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnOutForDelivery.setEnabled(false);
                        btnActive.setEnabled(false);
                        btnReturn.setEnabled(false);
                        btnDeliverd.setEnabled(false);
                        break;
                    default:
                        throw new AssertionError();
                }
                
                if (!status.equals("Delivered")) {
                    orderCode = deliveryOrdersTable.getValueAt(selectedRow, 0).toString();
                    orderOptions.setLocationRelativeTo(null);
                    orderOptions.setSize(787, 110);
                    orderOptions.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "This order has already been delivered and cannot be changed.");
                }
            }
        }
    }//GEN-LAST:event_deliveryOrdersTableMousePressed

    private void deliveryOrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliveryOrdersTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_deliveryOrdersTableMouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void paymentTypeCombo1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentTypeCombo1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentTypeCombo1MouseClicked

    private void paymentTypeCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentTypeCombo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentTypeCombo1ActionPerformed

    private void paymentTypeCombo1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentTypeCombo1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentTypeCombo1KeyReleased

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        String orderIdText = jTextField1.getText();

        if (!orderIdText.isEmpty()) {
            try {
                String orderId = orderIdText;
                getOrderById(orderId);
            } catch (NumberFormatException e) {
                Logger.getLogger(OrderFilter.class.getName()).log(Level.SEVERE, null, e);
                Log.error(OrderFilter.class, "Invalid Order ID: ", e);
            }
        } else {
            Logger.getLogger(OrderFilter.class.getName()).log(Level.WARNING, "Order ID is empty");
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    String orderCode=null;
    
    private void btnDeliverdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliverdActionPerformed
        if (orderCode != null) {
            try {
                deliveryOrderRepositoryImpl.update(orderCode, 5);

                Format formatter = new SimpleDateFormat("yyyy-MM-dd");
                String fromDate = formatter.format(jXDatePicker1.getDate());
                String toDate = formatter.format(jXDatePicker2.getDate());

                getAllOrders(fromDate, toDate, 0,0);

                orderOptions.dispose();
            } catch (Exception ex) {
                Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeliverdActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        try {
            deliveryOrderRepositoryImpl.update(orderCode, 6);

            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            getAllOrders(fromDate, toDate, 0,0);

            orderOptions.dispose();
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        try {
            deliveryOrderRepositoryImpl.update(orderCode, 7);

            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            getAllOrders(fromDate, toDate, 0,0);

            orderOptions.dispose();
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOutForDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutForDeliveryActionPerformed
        try {
            deliveryOrderRepositoryImpl.update(orderCode, 4);

            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            getAllOrders(fromDate, toDate, 0,0);

            orderOptions.dispose();
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOutForDeliveryActionPerformed

    private void btnActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActiveActionPerformed
        try {
            deliveryOrderRepositoryImpl.update(orderCode, 1);

            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            getAllOrders(fromDate, toDate, 0,0);

            orderOptions.dispose();
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnActiveActionPerformed

    private void btnWrappingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWrappingActionPerformed
        try {
            deliveryOrderRepositoryImpl.update(orderCode, 3);

            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = formatter.format(jXDatePicker1.getDate());
            String toDate = formatter.format(jXDatePicker2.getDate());

            getAllOrders(fromDate, toDate, 0,0);

            orderOptions.dispose();
        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnWrappingActionPerformed

    private void statusCmbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusCmbMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_statusCmbMouseClicked

    private void statusCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusCmbActionPerformed
        
    }//GEN-LAST:event_statusCmbActionPerformed

    private void statusCmbKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusCmbKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_statusCmbKeyReleased

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // Validate payment type
        if (paymentTypeCombo1.getSelectedIndex() == 0) {
            // Validate status
            if (statusCmb.getSelectedIndex() == 3) {
                ArrayList<WrapperOrder> wrapperOrders = null;
                try {
                    wrapperOrders = deliveryOrderRepositoryImpl.getWrappingOrder(jXDatePicker1.getDate(), jXDatePicker2.getDate());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(OrderFilter.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error retrieving wrapping orders.");
                    return;
                }

                if (wrapperOrders != null && !wrapperOrders.isEmpty()) {
                    try {
                        boolean success = generateExcel(wrapperOrders);
                        if (!success) {
                            JOptionPane.showMessageDialog(this, "Excel generation was cancelled or failed.");
                        }
                        // success message is shown inside generateExcel() if successful
                    } catch (Exception ex) {
                        Logger.getLogger(OrderFilter.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "An error occurred while generating the Excel file.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No records found for the selected dates.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select status as Wrapping");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select payment type as Any");
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    public boolean generateExcel(ArrayList<WrapperOrder> orders) throws Exception {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Wrapping Orders");

        String[] headers = {"TrackingNumber", "Reference", "PackageDescription", "ReceiverName", "ReceiverAddress", "ReceiverCity", "ReceiverContactNo", "NoOfPcs", "Kilo", "Gram", "Amount", "Exchange", "Remark"};
        Row headerRow = sheet.createRow(0);
        CellStyle headerStyle = workbook.createCellStyle();
        Font font = workbook.createFont();
        font.setBold(true);
        headerStyle.setFont(font);

        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(headerStyle);
        }

        int rowNum = 1;
        for (WrapperOrder order : orders) {
            double totalWeightKg = order.getWeight() / 1000.0;
            int kilos = (int) totalWeightKg;
            int grams = (int) ((totalWeightKg - kilos) * 1000);

            Row row = sheet.createRow(rowNum++);
            row.createCell(0).setCellValue(order.getOrderCode());
            row.createCell(1).setCellValue(order.getDeliveryId());
            row.createCell(2).setCellValue(0);
            row.createCell(3).setCellValue(order.getCustomerName());
            row.createCell(4).setCellValue(order.getAddress());
            row.createCell(5).setCellValue(0);
            row.createCell(6).setCellValue(order.getPhoneOne() + " / " + order.getPhoneTwo());
            row.createCell(7).setCellValue(1);
            row.createCell(8).setCellValue(kilos);
            row.createCell(9).setCellValue(grams);
            row.createCell(10).setCellValue(order.getCodAmount() + "");
            row.createCell(11).setCellValue(0);
            row.createCell(12).setCellValue(0);
        }

        for (int i = 0; i < headers.length; i++) {
            sheet.autoSizeColumn(i);
        }

        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save Excel File");
            int userSelection = fileChooser.showSaveDialog(null);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                if (!filePath.toLowerCase().endsWith(".xlsx")) {
                    filePath += ".xlsx";
                }

                FileOutputStream out = new FileOutputStream(filePath);
                workbook.write(out);
                out.close();
                workbook.close();

                // ✅ Only update status AFTER file is saved
                for (WrapperOrder order : orders) {
                    deliveryOrderRepositoryImpl.update(order.getDeliveryId(), 4);
                }

                JOptionPane.showMessageDialog(null, "Excel file generated successfully at:\n" + filePath);
                return true;
            } else {
                workbook.close(); // Close if cancelled
                return false;
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving Excel file: " + e.getMessage());
            return false;
        }
    }


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderFilter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActive;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDeliverd;
    private javax.swing.JButton btnOutForDelivery;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnWrapping;
    private org.jdesktop.swingx.JXTable deliveryOrdersTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    private javax.swing.JDialog orderOptions;
    private javax.swing.JComboBox<String> paymentTypeCombo1;
    private javax.swing.JComboBox<String> statusCmb;
    private javax.swing.JLabel total_orders_count_txt;
    // End of variables declaration//GEN-END:variables

    private void getOrderById(String orderId) {
        try {
            DeliveryOrder order = deliveryOrderRepositoryImpl.getOrderById(orderId);

            DefaultTableModel dtm = (DefaultTableModel) deliveryOrdersTable.getModel();
            dtm.setRowCount(0);

            if (order != null) {
                String status = null;
                if (order.getStatusType() == 1) {
                    status = "Active";
                } else if (order.getStatusType() == 2) {
                    status = "Pending";
                } else if (order.getStatusType() == 3) {
                    status = "Wrapping";
                } else if (order.getStatusType() == 4) {
                    status = "Out of Delivery";
                } else if (order.getStatusType() == 5) {
                    status = "Delivered";
                } else if (order.getStatusType() == 6) {
                    status = "Return";
                } else {
                    status = "Cancel";
                }

                Object[] rowData = {
                    order.getOrderId(),
                    order.getOrderCode(),
                    order.getCustomerName(),
                    order.getPhoneOne(),
                    order.getPhoneTwo(),
                    order.getCod(),
                    order.getGrandTotalPrice(),
                    status
                };
                dtm.addRow(rowData);
            } else {
                Logger.getLogger(OrderFilter.class.getName()).log(Level.WARNING, "No order found for Order ID: " + orderId);
            }

        } catch (Exception ex) {
            Logger.getLogger(DeliveryOrders.class.getName()).log(Level.SEVERE, null, ex);
            Log.error(OrderFilter.class, "Cannot load order details: ", ex);
        }
    }
}
