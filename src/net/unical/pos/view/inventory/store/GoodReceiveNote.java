/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.unical.pos.view.inventory.store;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.unical.pos.controller.GrnController;
import net.unical.pos.controller.MainItemCategoryController;
import net.unical.pos.controller.MainItemController;
import net.unical.pos.controller.PurchaseOrderController;
import net.unical.pos.controller.StockController;
import net.unical.pos.controller.StockLocationController;
import net.unical.pos.controller.SubItemCategoryController;
import net.unical.pos.controller.SupplierController;
import net.unical.pos.dto.GoodReceivedNoteDto;
import net.unical.pos.dto.MainItemCategoryDto;
import net.unical.pos.dto.MainItemDto;
import net.unical.pos.dto.PurchaseOrderDetailsDto;
import net.unical.pos.dto.PurchaseOrderDto;
import net.unical.pos.dto.StockDto;
import net.unical.pos.dto.StockLocationDto;
import net.unical.pos.dto.SubItemCategoryDto;
import net.unical.pos.dto.SupplierDto;
import net.unical.pos.log.Log;
import net.unical.pos.view.home.Dashboard;

/**
 *
 * @author Sanjuka
 */
public class GoodReceiveNote extends javax.swing.JInternalFrame {

    private SupplierController supplierController;
    private MainItemCategoryController mainItemCategoryController;
    private SubItemCategoryController subItemCategoryController;
    private PurchaseOrderController purchaseOrderController;
    private MainItemController mainItemController;
    private StockController stockController;
    private GrnController grnController;
    private StockLocationController stockLocationController;

    private ArrayList<Integer> supplierIds = new ArrayList<>();
    private ArrayList<Integer> mainCategoryIds = new ArrayList<>();
    private ArrayList<Integer> subCategoryIds = new ArrayList<>();
    private boolean isItem = false;

    Dashboard dashboard;

    /**
     * Creates new form GRN
     */
    public GoodReceiveNote(Dashboard dashboard) {
        initComponents();
        this.dashboard = dashboard;

        this.supplierController = new SupplierController();
        this.mainItemCategoryController = new MainItemCategoryController();
        this.subItemCategoryController = new SubItemCategoryController();
        this.purchaseOrderController = new PurchaseOrderController();
        this.mainItemController = new MainItemController();
        this.stockController = new StockController();
        this.grnController = new GrnController();
        this.stockLocationController = new StockLocationController();

        loadAllSuppliers();
        loadMainCategory();
        loadStockCombo();
        currentDatePicker.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        poList = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        poListTbl = new org.jdesktop.swingx.JXTable();
        btnSelect = new org.jdesktop.swingx.JXButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        supplierCmb = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        currentDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel4 = new javax.swing.JLabel();
        invNoTxt = new org.jdesktop.swingx.JXTextField();
        stockCmb = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        mainItemCategoryCmb = new javax.swing.JComboBox<>();
        subItemCategoryCmb = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtItemSearch = new org.jdesktop.swingx.JXTextField();
        btnSearch = new org.jdesktop.swingx.JXButton();
        btnReset = new org.jdesktop.swingx.JXButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        subTotalTxt = new javax.swing.JLabel();
        grandTotalTxt = new javax.swing.JLabel();
        addToStockBtn = new org.jdesktop.swingx.JXButton();
        btnTransferForm = new org.jdesktop.swingx.JXButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        grnTbl = new org.jdesktop.swingx.JXTable();

        poList.setTitle("Select Item");

        poList.setAlwaysOnTop(true);

        poList.setMinimumSize(new java.awt.Dimension(700, 450));

        poList.setResizable(false);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        poListTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PO ID", "PO Code", "Supplier", "Date", "Total", "Item Code", "Price", "Item Name", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(poListTbl);
        if (poListTbl.getColumnModel().getColumnCount() > 0) {
            poListTbl.getColumnModel().getColumn(0).setMinWidth(0);
            poListTbl.getColumnModel().getColumn(0).setPreferredWidth(0);
            poListTbl.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btnSelect.setBackground(new java.awt.Color(0, 102, 153));
        btnSelect.setForeground(new java.awt.Color(255, 255, 255));
        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(248, 248, 248)
                .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout poListLayout = new javax.swing.GroupLayout(poList.getContentPane());
        poList.getContentPane().setLayout(poListLayout);
        poListLayout.setHorizontalGroup(
            poListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        poListLayout.setVerticalGroup(
            poListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(poListLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Purchase Order Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 102, 153))); // NOI18N

        jLabel1.setText("Supplier");

        jLabel2.setText("Date");

        currentDatePicker.setForeground(new java.awt.Color(0, 0, 0));
        currentDatePicker.setOpaque(true);

        jLabel4.setForeground(new java.awt.Color(204, 0, 0));
        jLabel4.setText("Invoice No");

        invNoTxt.setBackground(new java.awt.Color(204, 204, 204));
        invNoTxt.setForeground(new java.awt.Color(204, 0, 0));
        invNoTxt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        stockCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Stock Name" }));

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Stock Name");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(supplierCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(invNoTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stockCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invNoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stockCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 102, 153))); // NOI18N

        jLabel5.setText("Main Category");

        mainItemCategoryCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainItemCategoryCmbActionPerformed(evt);
            }
        });

        jLabel6.setText("Sub Category");

        jLabel7.setText("Item Code | Name");

        txtItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemSearchActionPerformed(evt);
            }
        });
        txtItemSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemSearchKeyReleased(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(0, 102, 153));
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(153, 0, 0));
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(subItemCategoryCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mainItemCategoryCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtItemSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainItemCategoryCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subItemCategoryCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtItemSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 153));
        jLabel3.setText("Sub Total :");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 153));
        jLabel8.setText("Grand Total :");

        subTotalTxt.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        subTotalTxt.setForeground(new java.awt.Color(0, 102, 153));
        subTotalTxt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subTotalTxt.setText("0.00");
        subTotalTxt.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        grandTotalTxt.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        grandTotalTxt.setForeground(new java.awt.Color(0, 102, 153));
        grandTotalTxt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        grandTotalTxt.setText("0.00");
        grandTotalTxt.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        addToStockBtn.setBackground(new java.awt.Color(0, 102, 153));
        addToStockBtn.setForeground(new java.awt.Color(255, 255, 255));
        addToStockBtn.setText("Add to stock");
        addToStockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToStockBtnActionPerformed(evt);
            }
        });

        btnTransferForm.setBackground(new java.awt.Color(0, 153, 51));
        btnTransferForm.setForeground(new java.awt.Color(255, 255, 255));
        btnTransferForm.setText("Transfer from perchase order");
        btnTransferForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferFormActionPerformed(evt);
            }
        });

        grnTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Po Details Id", "Item Id", "Item Name", "Quantity", "Cost Price", "Unit Price", "Total Price", "Discount Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grnTbl.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                grnTblPropertyChange(evt);
            }
        });
        grnTbl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                grnTblKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(grnTbl);
        if (grnTbl.getColumnModel().getColumnCount() > 0) {
            grnTbl.getColumnModel().getColumn(0).setMinWidth(0);
            grnTbl.getColumnModel().getColumn(0).setPreferredWidth(0);
            grnTbl.getColumnModel().getColumn(0).setMaxWidth(0);
            grnTbl.getColumnModel().getColumn(1).setMinWidth(0);
            grnTbl.getColumnModel().getColumn(1).setPreferredWidth(0);
            grnTbl.getColumnModel().getColumn(1).setMaxWidth(0);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(subTotalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(grandTotalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addToStockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTransferForm, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(subTotalTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(grandTotalTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTransferForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addToStockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        isItem = true;
        String item = txtItemSearch.getText();
        String query = "WHERE item_code_prefix LIKE \'%" + item + "%\' OR item_name LIKE \'%" + item + "%\'";
        try {
            DefaultTableModel dtm = new DefaultTableModel(
                    new Object[]{"INV Number", "Supplier", "Date", "Item Code", "Item Name", "Price", "Select"}, 0
            ) {
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    if (columnIndex == getColumnCount() - 1) {
                        return Boolean.class; // Last column = checkbox
                    }
                    return super.getColumnClass(columnIndex);
                }

                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == getColumnCount() - 1; // Only last column editable
                }
            };

            poListTbl.setModel(dtm);
            ArrayList<MainItemDto> items = mainItemController.getAllItems(query);
            dtm.setRowCount(0);

            for (MainItemDto dto : items) {
                Object[] rowData = {
                    dto.getItemId(),
                    supplierCmb.getSelectedItem().toString(),
                    currentDatePicker.getDate(),
                    dto.getCodePrefix(), // hidden
                    dto.getItemName(), // hidden
                    dto.getCostPrice(),
                    false // checkbox (default unchecked)
                };
                dtm.addRow(rowData);
            }

            poList.setLocationRelativeTo(null);
            poList.setVisible(true);

        } catch (Exception ex) {
            Logger.getLogger(GoodReceiveNote.class.getName()).log(Level.SEVERE, null, ex);
            Log.error(ex, "Item Fetch Error");
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        formReset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void mainItemCategoryCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainItemCategoryCmbActionPerformed
        try {
            subItemCategoryCmb.removeAllItems();
            String mainCategoryName = mainItemCategoryCmb.getSelectedItem().toString();
            ArrayList<SubItemCategoryDto> subItemCategoryDto = subItemCategoryController.searchSubItemCategories(mainCategoryName);

            if (mainCategoryName != null) {
                if (subItemCategoryDto.size() == 0) {
                    subItemCategoryCmb.addItem(null);
                } else {
                    for (SubItemCategoryDto dto : subItemCategoryDto) {
                        subItemCategoryCmb.addItem(dto.getSubCategoryName());
                        subCategoryIds.add(dto.getSubItemCategoryId());
                    }
                }

            }
        } catch (Exception ex) {
            Logger.getLogger(GoodReceiveNote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mainItemCategoryCmbActionPerformed

    private void btnTransferFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferFormActionPerformed
        isItem = false;
        loadAllPO();
    }//GEN-LAST:event_btnTransferFormActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        try {
            if (isItem) {
                grnTbl.removeAll();
                DefaultTableModel poTableModel = (DefaultTableModel) poListTbl.getModel();
                DefaultTableModel grnTableModel = (DefaultTableModel) grnTbl.getModel();
                grnTableModel.setRowCount(0); // clear old rows

                for (int i = 0; i < poTableModel.getRowCount(); i++) {
                    Boolean isSelected = (Boolean) poTableModel.getValueAt(i, poTableModel.getColumnCount() - 1); // last col = checkbox

                    if (isSelected != null && isSelected) {
                        Integer itemCode = (Integer) poTableModel.getValueAt(i, 0);
                        System.out.println("item_code : " + itemCode);

                        ArrayList<MainItemDto> itemDtos
                                = mainItemController.searchAllItems(itemCode);
                        System.out.println("DTOS :" + itemDtos.getFirst().getItemName());
                        for (MainItemDto dto : itemDtos) {
                            System.out.println("item : " + dto.getItemName());
                            boolean found = false;

                            // 🔍 Check if item already exists in GRN table
                            for (int j = 0; j < grnTableModel.getRowCount(); j++) {
                                Integer existingItemId = (Integer) grnTableModel.getValueAt(j, 1); // col 1 = itemId
                                if (existingItemId.equals(dto.getItemId())) {
                                    // Update qty
                                    Double oldQty = Double.valueOf(grnTableModel.getValueAt(j, 3).toString()); // col 3 = qty
                                    Integer convertQty = oldQty.intValue();
                                    Integer dbQty = 0;
                                    Integer newQty = convertQty + dbQty;

                                    grnTableModel.setValueAt(newQty, j, 3);

                                    // Update total price
                                    Double price = (Double) grnTableModel.getValueAt(j, 4); // col 4 = lastGrnPrice
                                    Double newTotal = price * newQty;
                                    grnTableModel.setValueAt(newTotal, j, 6); // col 6 = totalItemPrice

                                    found = true;
                                    break;
                                }
                            }
                            System.out.println("Found : " + found);
                            // ➕ Add new row if not found
                            if (!found) {
                                System.out.println("mekata enne nedda");
                                Object[] rowData = {
                                    dto.getCodePrefix(),
                                    dto.getItemId(),
                                    dto.getItemName(),
                                    0,
                                    0.0,
                                    dto.getUnitPrice(),
                                    0.0,
                                    0
                                };
                                grnTableModel.addRow(rowData);
                            }
                        }
                    }
                }
                double subTotal = 0.0;
                for (int k = 0; k < grnTableModel.getRowCount(); k++) {
                    Double rowTotal = (Double) grnTableModel.getValueAt(k, 6); // col 6 = totalItemPrice
                    subTotal += rowTotal;
                }

                subTotalTxt.setText(String.valueOf(subTotal));
                grandTotalTxt.setText(String.valueOf(subTotal));
            } else {
                System.out.println("Not item");
                grnTbl.removeAll();

                DefaultTableModel poTableModel = (DefaultTableModel) poListTbl.getModel();
                DefaultTableModel grnTableModel = (DefaultTableModel) grnTbl.getModel();
                grnTableModel.setRowCount(0); // clear old rows

                // Loop through PO List table
                for (int i = 0; i < poTableModel.getRowCount(); i++) {
                    Boolean isSelected = (Boolean) poTableModel.getValueAt(i, poTableModel.getColumnCount() - 1); // last col = checkbox

                    if (isSelected != null && isSelected) {
                        Integer poCode = (Integer) poTableModel.getValueAt(i, 0);
                        System.out.println("PO_CODE : " + poCode);

                        ArrayList<PurchaseOrderDetailsDto> purchaseOrderDetailsDtos
                                = purchaseOrderController.getAllPurchaseOrderDetails(poCode);

                        for (PurchaseOrderDetailsDto dto : purchaseOrderDetailsDtos) {

                            boolean found = false;

                            // 🔍 Check if item already exists in GRN table
                            for (int j = 0; j < grnTableModel.getRowCount(); j++) {
                                Integer existingItemId = (Integer) grnTableModel.getValueAt(j, 1); // col 1 = itemId
                                if (existingItemId.equals(dto.getItemId())) {
                                    // Update qty
                                    Double oldQty = Double.valueOf(grnTableModel.getValueAt(j, 3).toString()); // col 3 = qty
                                    Integer convertQty = oldQty.intValue();
                                    Integer dbQty = dto.getQty().intValue();
                                    Integer newQty = convertQty + dbQty;

                                    grnTableModel.setValueAt(newQty, j, 3);

                                    // Update total price
                                    Double price = (Double) grnTableModel.getValueAt(j, 4); // col 4 = lastGrnPrice
                                    Double newTotal = price * newQty;
                                    grnTableModel.setValueAt(newTotal, j, 6); // col 6 = totalItemPrice

                                    found = true;
                                    break;
                                }
                            }

                            // ➕ Add new row if not found
                            if (!found) {
                                Object[] rowData = {
                                    dto.getPoDetailsId(),
                                    dto.getItemId(),
                                    dto.getItemName(),
                                    dto.getQty(),
                                    dto.getLastGrnPrice(),
                                    dto.getLastGrnPrice(),
                                    dto.getTotalItemPrice(),
                                    0
                                };
                                grnTableModel.addRow(rowData);
                            }
                        }
                    }
                }

                // 🔄 Recalculate totals after processing
                double subTotal = 0.0;
                for (int k = 0; k < grnTableModel.getRowCount(); k++) {
                    Double rowTotal = (Double) grnTableModel.getValueAt(k, 6); // col 6 = totalItemPrice
                    subTotal += rowTotal;
                }

                subTotalTxt.setText(String.valueOf(subTotal));
                grandTotalTxt.setText(String.valueOf(subTotal));
            }
        } catch (Exception ex) {
            Logger.getLogger(GoodReceiveNote.class.getName()).log(Level.SEVERE, null, ex);
        }

        poList.dispose();

    }//GEN-LAST:event_btnSelectActionPerformed

    private void addToStockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToStockBtnActionPerformed
        try {
            if (invNoTxt.getText() == null || invNoTxt.getText().trim().isEmpty() || stockCmb.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Please enter invoice number or choose a stock ", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int tableRows = grnTbl.getRowCount();
            boolean result = false;
            boolean update = false;
            Integer supplierId = supplierIds.get(supplierCmb.getSelectedIndex());
            GoodReceivedNoteDto grnDto = new GoodReceivedNoteDto(0,
                    invNoTxt.getText(),
                    supplierId,
                    Double.parseDouble(grandTotalTxt.getText()),
                    Double.parseDouble(grandTotalTxt.getText()),
                    currentDatePicker.getDate(),
                    1,
                    dashboard.CREATED_USER_ID,
                    1);

            Integer grnId = grnController.saveGrn(grnDto);

            for (int i = 0; tableRows > i; i++) {
                Integer itemId = (Integer) grnTbl.getValueAt(i, 1);
                Double costPrice = (Double) grnTbl.getValueAt(i, 4);
                Double lastGrnPrice = (Double) grnTbl.getValueAt(i, 4);
                Double qty = (Double) grnTbl.getValueAt(i, 3);

                ArrayList<MainItemDto> mainItemDtos = mainItemController.searchAllItems(itemId);

                for (MainItemDto itemDto : mainItemDtos) {
                    StockDto searchStockDto = stockController.searchStock(itemDto.getItemId());
                    if (searchStockDto != null) {
                        Double fromDBqty = searchStockDto.getQty();
                        System.out.println("QTY: " + fromDBqty);
                        StockDto stockDto = new StockDto(
                                0,
                                grnId,
                                itemDto.getMainCategoryId(),
                                itemDto.getSubCataegoryId(),
                                itemDto.getItemId(),
                                itemDto.getBarCode(),
                                1,
                                stockCmb.getSelectedItem().toString(),
                                1,
                                costPrice,
                                lastGrnPrice,
                                qty,
                                1,
                                dashboard.CREATED_USER_ID,
                                1);
                        Integer regId = mainItemController.getRegistryId(itemDto.getItemId());
                        if (regId == 0) {
                            Log.error(this, "Reg Id Can't Get");
                        }
                        System.out.println("RegID : " + regId);
                        stockDto.setRegistryId(regId);

                        update = stockController.updateStock(stockDto);
                    } else {
                        StockDto stockDto = new StockDto(
                                0,
                                grnId,
                                itemDto.getMainCategoryId(),
                                itemDto.getSubCataegoryId(),
                                itemDto.getItemId(),
                                itemDto.getBarCode(),
                                1,
                                stockCmb.getSelectedItem().toString(),
                                1,
                                costPrice,
                                lastGrnPrice,
                                qty,
                                1,
                                dashboard.CREATED_USER_ID,
                                1);
                        Integer regId = mainItemController.getRegistryId(itemDto.getItemId());
                        if (regId == 0) {
                            Log.error(this, "Reg Id Can't Get");
                        }
                        System.out.println("Reg ID : " + regId);
                        stockDto.setRegistryId(regId);
                        result = stockController.saveStock(stockDto);

                    }

                }

            }
            if (result) {
                formReset();
                JOptionPane.showMessageDialog(this, "Stock Added Successfully");

            } else if (update) {
                formReset();
                JOptionPane.showMessageDialog(this, "Stock Updated Successfully");

            } else {
                JOptionPane.showMessageDialog(this, "Stock Added Fail");
            }

        } catch (Exception ex) {
            Logger.getLogger(GoodReceiveNote.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addToStockBtnActionPerformed

    private void grnTblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grnTblKeyReleased
        int tableRows = grnTbl.getRowCount();
        Double totalPrice = 0.00;
        Double totalItemPrice = 0.00;
        for (int i = 0; tableRows > i; i++) {
            Double itemPrice = (Double) grnTbl.getValueAt(i, 4);
            Double qty = (Double) grnTbl.getValueAt(i, 3);

            totalPrice = totalPrice + itemPrice * qty;
            totalItemPrice = itemPrice * qty;

            grnTbl.setValueAt(totalItemPrice, i, 6);
        }

        subTotalTxt.setText(totalPrice + "");
        grandTotalTxt.setText(totalPrice + "");
    }//GEN-LAST:event_grnTblKeyReleased

    private void grnTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_grnTblPropertyChange

    }//GEN-LAST:event_grnTblPropertyChange

    private void txtItemSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemSearchActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtItemSearchActionPerformed

    private void txtItemSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemSearchKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_txtItemSearchKeyReleased

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GRN().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXButton addToStockBtn;
    private org.jdesktop.swingx.JXButton btnReset;
    private org.jdesktop.swingx.JXButton btnSearch;
    private org.jdesktop.swingx.JXButton btnSelect;
    private org.jdesktop.swingx.JXButton btnTransferForm;
    private org.jdesktop.swingx.JXDatePicker currentDatePicker;
    private javax.swing.JLabel grandTotalTxt;
    private org.jdesktop.swingx.JXTable grnTbl;
    private org.jdesktop.swingx.JXTextField invNoTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> mainItemCategoryCmb;
    private javax.swing.JDialog poList;
    private org.jdesktop.swingx.JXTable poListTbl;
    private javax.swing.JComboBox<String> stockCmb;
    private javax.swing.JComboBox<String> subItemCategoryCmb;
    private javax.swing.JLabel subTotalTxt;
    private javax.swing.JComboBox<String> supplierCmb;
    private org.jdesktop.swingx.JXTextField txtItemSearch;
    // End of variables declaration//GEN-END:variables

    private void loadAllSuppliers() {
        try {
            ArrayList<SupplierDto> supplierDtos = supplierController.getAll();

            for (SupplierDto dto : supplierDtos) {
                supplierCmb.addItem(dto.getCompanyName());
                supplierIds.add(dto.getSupplierId());
            }

        } catch (Exception ex) {
            Logger.getLogger(GoodReceiveNote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadMainCategory() {
        try {
            String quary = "WHERE status=1 and visible=1";
            ArrayList<MainItemCategoryDto> allCategories = mainItemCategoryController.getAll(quary);

            for (MainItemCategoryDto dto : allCategories) {
                mainItemCategoryCmb.addItem(dto.getCategoryName());
                mainCategoryIds.add(dto.getMainItemCategeryId());
            }
        } catch (Exception ex) {
            Logger.getLogger(GoodReceiveNote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllPO() {
        try {

            DefaultTableModel dtm = new DefaultTableModel(
                    new Object[]{"ID", "PO Code", "Supplier", "Date", "Total", "Select"}, 0
            ) {
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    if (columnIndex == getColumnCount() - 1) {
                        return Boolean.class; // Last column = checkbox
                    }
                    return super.getColumnClass(columnIndex);
                }

                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == getColumnCount() - 1; // Only last column editable
                }
            };

            poListTbl.setModel(dtm);
            poListTbl.getColumnModel().getColumn(1).setMinWidth(0);
            // Load data
            ArrayList<PurchaseOrderDto> allOrderDtos = purchaseOrderController.getAllPurchaseOrder();
            dtm.setRowCount(0);

            for (PurchaseOrderDto dto : allOrderDtos) {
                Object[] rowData = {
                    dto.getPoId(),
                    dto.getPoCodePrefix(),
                    dto.getSupplierName(),
                    dto.getExpectedDate(),
                    dto.getTotalOrderPrice(),
                    false // checkbox (default unchecked)
                };
                dtm.addRow(rowData);
            }

            poList.setLocationRelativeTo(null);
            poList.setVisible(true);

            // Define table model with checkbox in the last column
        } catch (Exception ex) {
            Logger.getLogger(GoodReceiveNote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadStockCombo() {
        ArrayList<StockLocationDto> stockLocationDtos = stockLocationController.getStockLocations();
        for (StockLocationDto stockLocationDto : stockLocationDtos) {
            stockCmb.addItem(stockLocationDto.getStockName());
        }
    }

    private void formReset() {
        DefaultTableModel df = (DefaultTableModel) grnTbl.getModel();
        df.setRowCount(0);

        txtItemSearch.setText("");
        invNoTxt.setText("");
        supplierCmb.setSelectedIndex(0);
        mainItemCategoryCmb.setSelectedIndex(0);
        stockCmb.setSelectedIndex(0);
        LocalDate localDate = LocalDate.now();
        Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
        currentDatePicker.setDate(date);
    }

}
